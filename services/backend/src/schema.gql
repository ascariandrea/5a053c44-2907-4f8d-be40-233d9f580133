# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthGQL {
  sub: ID!
  username: String!
  token: String!
  permissions: [String!]!
}

type UserGQL {
  id: ID!
  username: String!
  permissions: [String!]!
}

type TravelMoodsGQL {
  nature: Int!
  history: Int!
  relax: Int!
  party: Int!
  culture: Int!
}

type TravelGQL {
  id: ID!
  name: String!
  slug: String!
  description: String!
  numberOfDays: Int!
  moods: TravelMoodsGQL!
  creator: UserGQL!
  tours: [TourGQL!]!
}

type PaginatedTravels {
  total: Int!
  edges: [TravelGQLEdge!]
}

type TravelGQLEdge {
  cursor: String!
  node: TravelGQL!
}

type TourGQL {
  id: ID!
  name: String!
  price: Int!
  startingDate: DateTime!
  endingDate: DateTime!
  travel: TravelGQL!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PaginatedTours {
  total: Int!
  edges: [TourGQLEdge!]
}

type TourGQLEdge {
  cursor: String!
  node: TourGQL!
}

type Query {
  getUser: UserGQL!
  getUsers(username: String, skip: Int!, take: Int!): [UserGQL!]!
  getTours(skip: Int = 0, take: Int = 20, travelId: ID!, name: String, startingDate: String): PaginatedTours!
  getTravels(skip: Int = 0, take: Int = 20): PaginatedTravels!
  getTravelById(id: String!): TravelGQL!
  getTravelBySlug(slug: String!): TravelGQL!
}

type Mutation {
  createUser(userData: CreateUserInput!): UserGQL!
  loginUser(loginData: LoginUserInput!): AuthGQL
  createTour(tourData: CreateTourData!): TourGQL!
  deleteTour(tourId: String!): TourGQL!
  createTravel(travelData: CreateTravelData!): TravelGQL!
  editTravel(travelId: String!, travelData: EditTravelData!): TravelGQL!
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
  permissions: [String!]!
}

input LoginUserInput {
  username: String!
  password: String!
}

input CreateTourData {
  name: String!
  price: Float!
  startingDate: DateTime!
  travelId: String!
}

input CreateTravelData {
  name: String!
  slug: String!
  description: String!
  numberOfDays: Float!
  moods: TravelMoodsInput!
}

input TravelMoodsInput {
  nature: Float!
  relax: Float!
  history: Float!
  culture: Float!
  party: Float!
}

input EditTravelData {
  name: String!
  slug: String!
  description: String!
  numberOfDays: Float!
  moods: TravelMoodsInput!
  userId: ID!
}